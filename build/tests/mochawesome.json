{
  "stats": {
    "suites": 3,
    "tests": 12,
    "passes": 12,
    "pending": 0,
    "failures": 0,
    "start": "2024-05-13T15:29:23.087Z",
    "end": "2024-05-13T15:29:28.224Z",
    "duration": 5137,
    "testsRegistered": 12,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a530cf64-348e-4781-b8dc-bb9d1bb054a1",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before each\" hook in \"{root}\"",
          "fullTitle": "\"before each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "this.currentTest.response_timer = new Timer()",
          "err": {},
          "uuid": "32127a2a-d2df-451c-921b-e33f81e8a7e0",
          "parentUUID": "a530cf64-348e-4781-b8dc-bb9d1bb054a1",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e8b48029-1442-4e17-b502-82c10e60f6fa",
          "title": "connection",
          "fullFile": "/home/corey/fetch-swarm/test/test.js",
          "file": "/test/test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a connection with default values",
              "fullTitle": "connection should create a connection with default values",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const conn = await Connection.create()\nexpect(conn.concurrency).to.equal(2)\nexpect(conn.minMsBetweenRequests).to.equal(150)\nexpect(conn.timeoutMs).to.equal(0)\nexpect(conn.retry).to.equal(0)",
              "err": {},
              "uuid": "d6fad762-78f8-4ee1-9401-eab61d3ce27f",
              "parentUUID": "e8b48029-1442-4e17-b502-82c10e60f6fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a connection with given parameters",
              "fullTitle": "connection should create a connection with given parameters",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const conn = await Connection.create({\n  concurrency: 3,\n  minMsBetweenRequests: 100,\n  timeoutMs: 5000,\n  retry: 2\n})\nexpect(conn.concurrency).to.equal(3)\nexpect(conn.minMsBetweenRequests).to.equal(100)\nexpect(conn.timeoutMs).to.equal(5000)\nexpect(conn.retry).to.equal(2)",
              "err": {},
              "uuid": "be66bf91-d257-40e7-be30-af84ab23cbdd",
              "parentUUID": "e8b48029-1442-4e17-b502-82c10e60f6fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not be possible to instantiate via new",
              "fullTitle": "connection should not be possible to instantiate via new",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  const conn = new Connection()\n  expect.fail(conn)\n} catch (err) {\n  expect(err).to.be.a('error').with.property('message', 'The constructor is not intended to be used; use Connection.create instead')\n}",
              "err": {},
              "uuid": "c828f836-816a-44e0-968b-5c87646fb807",
              "parentUUID": "e8b48029-1442-4e17-b502-82c10e60f6fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not be possible change parameters after creation",
              "fullTitle": "connection should not be possible change parameters after creation",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const conn = await Connection.create()\ntry {\n  conn.concurrency = 2\n  expect.fail()\n} catch (err) {}\ntry {\n  conn.minMsBetweenRequests = 2\n  expect.fail()\n} catch (err) {}\ntry {\n  conn.timeoutMs = 2\n  expect.fail()\n} catch (err) {}\ntry {\n  conn.retry = 2\n  expect.fail()\n} catch (err) {}",
              "err": {},
              "uuid": "c2a5e27f-b7a3-4af7-9faf-a9cf4859765c",
              "parentUUID": "e8b48029-1442-4e17-b502-82c10e60f6fa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d6fad762-78f8-4ee1-9401-eab61d3ce27f",
            "be66bf91-d257-40e7-be30-af84ab23cbdd",
            "c828f836-816a-44e0-968b-5c87646fb807",
            "c2a5e27f-b7a3-4af7-9faf-a9cf4859765c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "39abb9b6-60dc-4cb3-8fef-bbe3ad752543",
          "title": "one (basic)",
          "fullFile": "/home/corey/fetch-swarm/test/test.js",
          "file": "/test/test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should execute one fetch",
              "fullTitle": "one (basic) should execute one fetch",
              "timedOut": false,
              "duration": 502,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const conn = await Connection.create()\nthis.test.response_timer.add(await conn.one('req:200/moop1/500'))\nthis.test.response_timer.validate('res:200/moop1/500')",
              "err": {},
              "uuid": "0cd29f7a-48d3-4872-b30a-af6ada35a3b8",
              "parentUUID": "39abb9b6-60dc-4cb3-8fef-bbe3ad752543",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should execute two fetches serially",
              "fullTitle": "one (basic) should execute two fetches serially",
              "timedOut": false,
              "duration": 1002,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const conn = await Connection.create()\nthis.test.response_timer.add(await conn.one('req:200/moop1/600'))\nthis.test.response_timer.add(await conn.one('req:200/moop2/400'))\nthis.test.response_timer.validate([\n  'res:200/moop1/600',\n  'res:200/moop2/1000'\n])",
              "err": {},
              "uuid": "476f5f74-84d8-4c08-9aa7-c2695e257157",
              "parentUUID": "39abb9b6-60dc-4cb3-8fef-bbe3ad752543",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should execute five fetches serially",
              "fullTitle": "one (basic) should execute five fetches serially",
              "timedOut": false,
              "duration": 1505,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const conn = await Connection.create()\nthis.test.response_timer.add(await conn.one('req:200/moop1/300'))\nthis.test.response_timer.add(await conn.one('req:200/moop2/300'))\nthis.test.response_timer.add(await conn.one('req:200/moop3/300'))\nthis.test.response_timer.add(await conn.one('req:200/moop4/200'))\nthis.test.response_timer.add(await conn.one('req:200/moop5/400'))\nthis.test.response_timer.validate([\n  'res:200/moop1/300',\n  'res:200/moop2/600',\n  'res:200/moop3/900',\n  'res:200/moop4/1100',\n  'res:200/moop5/1500'\n])",
              "err": {},
              "uuid": "2a22450a-4812-4633-860f-26c7a77f485b",
              "parentUUID": "39abb9b6-60dc-4cb3-8fef-bbe3ad752543",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle a network error",
              "fullTitle": "one (basic) should handle a network error",
              "timedOut": false,
              "duration": 303,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const conn = await Connection.create()\ntry {\n  await conn.one('req:999/moop1/300')\n  expect.fail()\n} catch (err) {\n  expect(err).to.be.an('error').with.property('message', 'moop1')\n}",
              "err": {},
              "uuid": "050e65c4-80a9-4b91-ad17-41ed2ce690b0",
              "parentUUID": "39abb9b6-60dc-4cb3-8fef-bbe3ad752543",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0cd29f7a-48d3-4872-b30a-af6ada35a3b8",
            "476f5f74-84d8-4c08-9aa7-c2695e257157",
            "2a22450a-4812-4633-860f-26c7a77f485b",
            "050e65c4-80a9-4b91-ad17-41ed2ce690b0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3312,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "9597afe6-e747-4d61-97d3-71ee7aaaefcf",
          "title": "swarm (basic)",
          "fullFile": "/home/corey/fetch-swarm/test/test.js",
          "file": "/test/test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should execute a swarm of zero",
              "fullTitle": "swarm (basic) should execute a swarm of zero",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const conn = await Connection.create()\nfor await (const response of conn.swarm([])) {\n  expect.fail(response)\n}",
              "err": {},
              "uuid": "961c7bf4-2335-4271-8653-49f91d266e26",
              "parentUUID": "9597afe6-e747-4d61-97d3-71ee7aaaefcf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should execute a swarm of one",
              "fullTitle": "swarm (basic) should execute a swarm of one",
              "timedOut": false,
              "duration": 301,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const conn = await Connection.create()\nfor await (const response of conn.swarm(['req:200/moop1/300'])) {\n  this.test.response_timer.add(response)\n}\nthis.test.response_timer.validate(['res:200/moop1/300'])",
              "err": {},
              "uuid": "7f6171c8-70fd-4e71-8a16-c900d2ef1f40",
              "parentUUID": "9597afe6-e747-4d61-97d3-71ee7aaaefcf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should execute a swarm of two concurrently",
              "fullTitle": "swarm (basic) should execute a swarm of two concurrently",
              "timedOut": false,
              "duration": 403,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const conn = await Connection.create()\nfor await (const response of conn.swarm(['req:200/moop1/300', 'req:200/moop2/400'])) {\n  this.test.response_timer.add(response)\n}\nthis.test.response_timer.validate(['res:200/moop1/300', 'res:200/moop2/400'])",
              "err": {},
              "uuid": "d91e7179-2d5a-4c0b-b0fa-184f4a432585",
              "parentUUID": "9597afe6-e747-4d61-97d3-71ee7aaaefcf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should execute a swarm of five semi-concurrently",
              "fullTitle": "swarm (basic) should execute a swarm of five semi-concurrently",
              "timedOut": false,
              "duration": 1103,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const conn = await Connection.create()\nfor await (const response of conn.swarm(['req:200/moop1/700', 'req:200/moop2/300', 'req:200/moop3/300', 'req:200/moop4/500', 'req:200/moop5/200'])) {\n  this.test.response_timer.add(response)\n}\nthis.test.response_timer.validate(['res:200/moop1/700', 'res:200/moop2/300', 'res:200/moop3/600', 'res:200/moop4/1100', 'res:200/moop5/900'])",
              "err": {},
              "uuid": "40ad75bb-3e32-4e37-b648-7fd34e5d10a9",
              "parentUUID": "9597afe6-e747-4d61-97d3-71ee7aaaefcf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "961c7bf4-2335-4271-8653-49f91d266e26",
            "7f6171c8-70fd-4e71-8a16-c900d2ef1f40",
            "d91e7179-2d5a-4c0b-b0fa-184f4a432585",
            "40ad75bb-3e32-4e37-b648-7fd34e5d10a9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1807,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "build/tests"
      },
      "version": "6.2.0"
    }
  }
}