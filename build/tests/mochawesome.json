{
  "stats": {
    "suites": 3,
    "tests": 12,
    "passes": 12,
    "pending": 0,
    "failures": 0,
    "start": "2024-05-13T20:07:13.277Z",
    "end": "2024-05-13T20:07:18.405Z",
    "duration": 5128,
    "testsRegistered": 12,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "f8ac89c8-81eb-4724-abe1-c6dd52e81857",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before each\" hook in \"{root}\"",
          "fullTitle": "\"before each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "this.currentTest.response_timer = new Timer()",
          "err": {},
          "uuid": "e3b592d8-7c51-4935-8610-cd53b1907f5f",
          "parentUUID": "f8ac89c8-81eb-4724-abe1-c6dd52e81857",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "91c87286-2402-4f59-a661-7febc3ea43f8",
          "title": "connection",
          "fullFile": "/home/corey/fetch-swarm/test/test.js",
          "file": "/test/test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a connection with default values",
              "fullTitle": "connection should create a connection with default values",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const conn = await Connection.create()\nexpect(conn.concurrency).to.equal(2)\nexpect(conn.minMsBetweenRequests).to.equal(150)\nexpect(conn.timeoutMs).to.equal(0)\nexpect(conn.retry).to.equal(0)",
              "err": {},
              "uuid": "3d0fd33b-b3cc-4792-92f0-5280af0b7038",
              "parentUUID": "91c87286-2402-4f59-a661-7febc3ea43f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a connection with given parameters",
              "fullTitle": "connection should create a connection with given parameters",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const conn = await Connection.create({\n  concurrency: 3,\n  minMsBetweenRequests: 100,\n  timeoutMs: 5000,\n  retry: 2\n})\nexpect(conn.concurrency).to.equal(3)\nexpect(conn.minMsBetweenRequests).to.equal(100)\nexpect(conn.timeoutMs).to.equal(5000)\nexpect(conn.retry).to.equal(2)",
              "err": {},
              "uuid": "2ce4743e-2aed-435d-b9b4-37f47915a04e",
              "parentUUID": "91c87286-2402-4f59-a661-7febc3ea43f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not be possible to instantiate via new",
              "fullTitle": "connection should not be possible to instantiate via new",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  const conn = new Connection()\n  expect.fail(conn)\n} catch (err) {\n  expect(err).to.be.a('error').with.property('message', 'The constructor is not intended to be used; use Connection.create instead')\n}",
              "err": {},
              "uuid": "6d6738df-9b62-4d17-879b-7935bf5f7095",
              "parentUUID": "91c87286-2402-4f59-a661-7febc3ea43f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not be possible change parameters after creation",
              "fullTitle": "connection should not be possible change parameters after creation",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const conn = await Connection.create()\ntry {\n  conn.concurrency = 2\n  expect.fail()\n} catch (err) {}\ntry {\n  conn.minMsBetweenRequests = 2\n  expect.fail()\n} catch (err) {}\ntry {\n  conn.timeoutMs = 2\n  expect.fail()\n} catch (err) {}\ntry {\n  conn.retry = 2\n  expect.fail()\n} catch (err) {}",
              "err": {},
              "uuid": "5792863e-98b3-4b6d-89b3-d8b16a117d52",
              "parentUUID": "91c87286-2402-4f59-a661-7febc3ea43f8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3d0fd33b-b3cc-4792-92f0-5280af0b7038",
            "2ce4743e-2aed-435d-b9b4-37f47915a04e",
            "6d6738df-9b62-4d17-879b-7935bf5f7095",
            "5792863e-98b3-4b6d-89b3-d8b16a117d52"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "540a2fa2-30ff-409e-ac53-86821622edbb",
          "title": "one (basic)",
          "fullFile": "/home/corey/fetch-swarm/test/test.js",
          "file": "/test/test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should execute one fetch",
              "fullTitle": "one (basic) should execute one fetch",
              "timedOut": false,
              "duration": 502,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const conn = await Connection.create()\nthis.test.response_timer.add(await conn.one('req:200/moop1/500'))\nthis.test.response_timer.validate('res:200/moop1/500')",
              "err": {},
              "uuid": "8d7e3374-0947-43d5-86d2-84f98f608db8",
              "parentUUID": "540a2fa2-30ff-409e-ac53-86821622edbb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should execute two fetches serially",
              "fullTitle": "one (basic) should execute two fetches serially",
              "timedOut": false,
              "duration": 1002,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const conn = await Connection.create()\nthis.test.response_timer.add(await conn.one('req:200/moop1/600'))\nthis.test.response_timer.add(await conn.one('req:200/moop2/400'))\nthis.test.response_timer.validate([\n  'res:200/moop1/600',\n  'res:200/moop2/1000'\n])",
              "err": {},
              "uuid": "3b6b2755-b5bb-4ebc-bc36-b152a95a901c",
              "parentUUID": "540a2fa2-30ff-409e-ac53-86821622edbb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should execute five fetches serially",
              "fullTitle": "one (basic) should execute five fetches serially",
              "timedOut": false,
              "duration": 1504,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const conn = await Connection.create()\nthis.test.response_timer.add(await conn.one('req:200/moop1/300'))\nthis.test.response_timer.add(await conn.one('req:200/moop2/300'))\nthis.test.response_timer.add(await conn.one('req:200/moop3/300'))\nthis.test.response_timer.add(await conn.one('req:200/moop4/200'))\nthis.test.response_timer.add(await conn.one('req:200/moop5/400'))\nthis.test.response_timer.validate([\n  'res:200/moop1/300',\n  'res:200/moop2/600',\n  'res:200/moop3/900',\n  'res:200/moop4/1100',\n  'res:200/moop5/1500'\n])",
              "err": {},
              "uuid": "c684e728-9b24-42dc-973f-e237ca672360",
              "parentUUID": "540a2fa2-30ff-409e-ac53-86821622edbb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle a network error",
              "fullTitle": "one (basic) should handle a network error",
              "timedOut": false,
              "duration": 301,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const conn = await Connection.create()\ntry {\n  await conn.one('req:999/moop1/300')\n  expect.fail()\n} catch (err) {\n  expect(err).to.be.an('error').with.property('message', 'moop1')\n}",
              "err": {},
              "uuid": "1ae0532c-227d-431d-9c14-af41f9c03379",
              "parentUUID": "540a2fa2-30ff-409e-ac53-86821622edbb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8d7e3374-0947-43d5-86d2-84f98f608db8",
            "3b6b2755-b5bb-4ebc-bc36-b152a95a901c",
            "c684e728-9b24-42dc-973f-e237ca672360",
            "1ae0532c-227d-431d-9c14-af41f9c03379"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3309,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "8b04f1db-f09e-4e86-8718-5f3d989736ce",
          "title": "swarm (basic)",
          "fullFile": "/home/corey/fetch-swarm/test/test.js",
          "file": "/test/test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should execute a swarm of zero",
              "fullTitle": "swarm (basic) should execute a swarm of zero",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const conn = await Connection.create()\nfor await (const response of conn.swarm([])) {\n  expect.fail(response)\n}",
              "err": {},
              "uuid": "69bc691b-a674-40b1-8ab3-c7a15424b23f",
              "parentUUID": "8b04f1db-f09e-4e86-8718-5f3d989736ce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should execute a swarm of one",
              "fullTitle": "swarm (basic) should execute a swarm of one",
              "timedOut": false,
              "duration": 301,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const conn = await Connection.create()\nfor await (const response of conn.swarm(['req:200/moop1/300'])) {\n  this.test.response_timer.add(response)\n}\nthis.test.response_timer.validate(['res:200/moop1/300'])",
              "err": {},
              "uuid": "6485f89b-759c-4670-aa96-a4240f1872a3",
              "parentUUID": "8b04f1db-f09e-4e86-8718-5f3d989736ce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should execute a swarm of two concurrently",
              "fullTitle": "swarm (basic) should execute a swarm of two concurrently",
              "timedOut": false,
              "duration": 402,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const conn = await Connection.create()\nfor await (const response of conn.swarm(['req:200/moop1/300', 'req:200/moop2/400'])) {\n  this.test.response_timer.add(response)\n}\nthis.test.response_timer.validate(['res:200/moop1/300', 'res:200/moop2/400'])",
              "err": {},
              "uuid": "e33beaab-90b5-455c-a126-d2340b8cb90f",
              "parentUUID": "8b04f1db-f09e-4e86-8718-5f3d989736ce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should execute a swarm of five semi-concurrently",
              "fullTitle": "swarm (basic) should execute a swarm of five semi-concurrently",
              "timedOut": false,
              "duration": 1101,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const conn = await Connection.create()\nfor await (const response of conn.swarm(['req:200/moop1/700', 'req:200/moop2/300', 'req:200/moop3/300', 'req:200/moop4/500', 'req:200/moop5/200'])) {\n  this.test.response_timer.add(response)\n}\nthis.test.response_timer.validate(['res:200/moop1/700', 'res:200/moop2/300', 'res:200/moop3/600', 'res:200/moop4/1100', 'res:200/moop5/900'])",
              "err": {},
              "uuid": "9ccb9a05-12f5-4a48-b9e6-2a3372d95aaa",
              "parentUUID": "8b04f1db-f09e-4e86-8718-5f3d989736ce",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "69bc691b-a674-40b1-8ab3-c7a15424b23f",
            "6485f89b-759c-4670-aa96-a4240f1872a3",
            "e33beaab-90b5-455c-a126-d2340b8cb90f",
            "9ccb9a05-12f5-4a48-b9e6-2a3372d95aaa"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1804,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "build/tests"
      },
      "version": "6.2.0"
    }
  }
}